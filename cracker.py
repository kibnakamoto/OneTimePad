"""
By: Taha Canturk (Kibnakamoto)
Github: Kibnakamoto
Date: Jul 17, 2023

OneTimePad licenced under the GNU General Public Licence
"""

# python file for cracking the plaintexts using the data given

from secrets import choice
from time import time
from decimal import Decimal

dot_arts = [
'''
 ________  ________   _______  _________  ___  _____ ______   _______   ________  ________  ________          ________  ________  ________  ________  ___  __    _______   ________     
|\\   __  \\|\\   ___  \\|\\  ___ \\|\\___   ___|\\  \\|\\   _ \\  _   \\|\\  ___ \\ |\\   __  \\|\\   __  \\|\\   ___ \\        |\\   ____\\|\\   __  \\|\\   __  \\|\\   ____\\|\\  \\|\\  \\ |\\  ___ \\ |\\   __  \\    
\\ \\  \\|\\  \\ \\  \\\\ \\  \\ \\   __/\\|___ \\  \\_\\ \\  \\ \\  \\\\\\__\\ \\  \\ \\   __/|\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\_|\\ \\       \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\___|\\ \\  \\/  /|\\ \\   __/|\\ \\  \\|\\  \\   
 \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\  \\_|/__  \\ \\  \\ \\ \\  \\ \\  \\\\|__| \\  \\ \\  \\_|/_\\ \\   ____\\ \\   __  \\ \\  \\ \\\\ \\       \\ \\  \\    \\ \\   _  _\\ \\   __  \\ \\  \\    \\ \\   ___  \\ \\  \\_|/_\\ \\   _  _\\  
  \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\  \\ \\  \\ \\ \\  \\ \\  \\    \\ \\  \\ \\  \\_|\\ \\ \\  \\___|\\ \\  \\ \\  \\ \\  \\_\\\\ \\       \\ \\  \\____\\ \\  \\\\  \\\\ \\  \\ \\  \\ \\  \\____\\ \\  \\\\ \\  \\ \\  \\_|\\ \\ \\  \\\\  \\| 
   \\ \\_______\\ \\__\\\\ \\__\\ \\_______\\  \\ \\__\\ \\ \\__\\ \\__\\    \\ \\__\\ \\_______\\ \\__\\    \\ \\__\\ \\__\\ \\_______\\       \\ \\_______\\ \\__\\\\ _\\\\ \\__\\ \\__\\ \\_______\\ \\__\\\\ \\__\\ \\_______\\ \\__\\\\ _\\ 
    \\|_______|\\|__| \\|__|\\|_______|   \\|__|  \\|__|\\|__|     \\|__|\\|_______|\\|__|     \\|__|\\|__|\\|_______|        \\|_______|\\|__|\\|__|\\|__|\\|__|\\|_______|\\|__| \\|__|\\|_______|\\|__|\\|__|
 ''',

'''
⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠂⠀⠄⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣶⣶⣶⣿⣿⣿⣿⣶⣶⣶⣦⣤⣄⣀⠐⠠⠀⠀⠀⡀⠀⠀⠀⠂⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠠⠀⠂⠁
⠀⠀⠀⡀⠀⠀⢀⠀⠀⠀⢀⠀⠀⠠⠀⠁⠀⠈⠀⠀⣀⣴⣶⣿⣿⣿⠿⠟⠛⠛⠋⢍⣿⣿⠙⠛⠛⠻⠿⣿⣿⣿⣶⣤⣀⠁⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠂⠁⠀⠂⠀⠀⠀⠀
⠀⠀⠁⠀⠀⠈⠀⠀⠁⠀⠀⠀⢀⠀⠀⠀⠀⢀⣴⣾⣿⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀⠀⠀⠀⠈⠙⠻⢿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠁⢀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⣿⣶⣀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠐⠀⠀⠀⠂⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⢠⣴⣿⣿⡟⠁⠀⠀⠀⠀⠀⠈⠀⠀⠐⠀⠀⠀⢠⣿⣿⠀⠀⠀⠀⠀⠈⠀⠀⠁⠀⠀⠀⠀⢹⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⡀⠀
⠃⠀⠀⠘⠀⠀⠘⠀⠀⠀⠃⠀⢀⣾⣿⡿⠋⠀⠀⠀⠀⠀⠃⠀⠀⠀⠃⠀⠀⠃⠀⠘⣿⣿⠘⠀⠀⠀⠃⠀⠀⠘⠀⠀⠀⠀⠀⠀⠙⢿⣿⣷⡀⠀⠃⠀⠘⠀⠀⠀⠃⠀⠀⠁⠀
⡀⠌⠀⠀⡀⠀⠀⡀⠀⠀⠀⢀⣾⣿⡟⠁⢀⠀⠀⠀⠀⠀⢀⠀⠈⠀⠀⠈⠀⠀⠀⢐⣿⣿⠀⠀⠀⠀⡀⠈⠀⠀⠀⠁⢀⠈⠀⠀⠀⠐⢻⣿⣿⡀⠀⠀⠀⡀⠈⠀⡀⠀⠀⡀⠀
⠀⠀⠠⠀⠀⠠⠀⠀⠀⠄⢀⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠄⠀⠀⠠⠀⡀⠠⢀⣿⣿⠀⠀⠀⠀⢀⠀⠄⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⡀⠐⠀⠀⠀⠀⠀⠠⠀⠀⠀
⠀⠂⠀⠀⠀⠠⠀⠂⠀⠀⣼⣿⡿⠐⠀⠀⠀⠀⠄⠂⠀⠀⠀⠂⠀⠀⠂⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠂⠀⠀⠐⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⢻⣿⣧⠀⠀⠂⠀⠐⠀⠀⠀⠂⠀
⠂⠀⠁⠀⠀⠀⠀⠀⠀⢠⣿⣿⢇⠀⠀⠐⠀⠀⠀⠀⠀⠀⠐⠀⠈⠀⠀⠈⠀⡀⠈⠐⣿⣿⠀⠀⠀⠁⠀⠀⠀⠀⠀⠁⠀⠁⠀⡀⠈⠀⠐⠀⠘⣿⣿⡆⠀⠀⠀⠀⠂⠀⠀⡀⠀
⠀⠀⠈⠀⠀⠈⠀⡀⠀⢸⣿⣿⠀⠀⠀⠄⠀⠠⠀⠀⠠⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⠀⠀⠀⠀⠠⠀⠀⠠⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⢿⣿⣧⠀⠀⠐⠀⠀⠠⢀⠀⠀
⠐⠀⠀⠂⠀⠀⠄⠀⠀⣿⣿⣿⣶⣶⣶⣾⣶⣶⣶⣶⣶⣶⣶⣶⣶⣾⣷⣶⣶⣶⣶⣶⣿⣿⣶⣶⣾⣶⣶⣶⣶⣾⣶⣶⣶⣶⣶⣾⣶⣶⣶⣶⣶⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠄⠁⠀⠀⠀⠀⠀⠀⢹⣿⣟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣿⣿⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⢻⣿⣿⡀⠀⠀⠀⠀⠀⠀⡀⠀
⠀⠀⡀⠀⠀⠐⠀⠀⠀⢸⣿⣿⠀⠀⠀⡀⠀⠀⡀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⢀⠈⣿⣿⠀⠀⠀⠀⠀⠀⡀⠀⠀⡀⠀⢀⠀⠀⠀⠀⠀⠀⠀⣾⣿⡏⠁⠀⢀⠀⠁⢀⠀⠀⠀
⠄⠂⠀⠀⠄⠀⠀⠄⠀⠘⣿⣿⡆⠀⠀⠀⠠⠀⠀⠀⠀⠀⠠⠀⠀⠀⠄⠀⠠⠀⠀⠈⣿⣿⠠⠀⠀⠀⠄⠀⠀⠠⠀⠀⠠⠀⠀⠀⠀⠀⠠⠀⢠⣿⣿⢇⠀⠀⠀⠀⠄⠀⠀⠄⠀
⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡀⠀⠀⠀⠀⠀⢀⠀⠂⠀⠀⠂⠀⠀⠐⠀⠀⠐⠠⣿⣿⠀⠀⠀⠀⠀⠂⠀⠀⠀⠂⠀⠀⢀⠀⠀⠂⠀⠀⣾⣿⡟⠀⠀⡀⠂⠀⠀⠀⠀⠀⠀
⠀⠁⡀⠀⠁⢀⠀⠁⠀⠀⠈⢿⣿⣧⠀⠀⠈⠀⠀⠀⠀⡀⠈⠀⡀⠀⠁⢀⠀⠀⢀⠠⣿⣿⠀⠀⢀⠀⠁⠀⡀⠈⠀⡀⠈⢀⠀⠀⠀⠀⠀⣽⣿⡿⠁⠀⠀⢀⠀⠀⠁⠀⠀⠁⠀
⠁⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣷⡀⠀⡀⠀⡄⠀⠀⠀⠀⠀⠀⡄⠀⠀⠁⠀⢠⣿⣿⠀⠀⠀⠀⠀⡀⠀⠀⠀⡀⢠⠀⠀⠀⠀⢀⣽⣿⣿⠁⠀⡀⠀⡄⠀⠀⡄⠀⢠⠀⠀
⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢿⣿⣿⡆⠁⠀⠀⠀⠆⢀⠀⠰⠀⠀⠀⠀⡀⠰⠀⣿⣿⠀⠀⠰⠀⡀⠁⠀⠀⠀⠁⠀⠀⠀⠀⢀⣾⣿⡿⠃⠀⠀⠁⠀⠀⠀⠀⡀⠰⠀⠀⠀
⠀⠀⠠⠀⠂⠀⠐⠀⠤⠀⠀⠠⠀⠀⠹⣿⣿⣦⡀⠀⠀⠀⠀⠀⠄⠀⠂⠀⠀⠀⠀⢈⣿⣿⠀⠀⠀⠀⠀⠀⡀⠐⠀⠀⠀⠀⢈⣴⣿⣿⠟⠁⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀
⠄⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠠⣿⣿⠀⠀⠈⠀⢀⠀⠀⠀⠀⠀⣠⣴⣿⣿⠟⠁⠀⠀⠀⠀⠀⠈⠀⠀⠀⢀⠀⠀⠀⡀⠀
⠀⠐⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⠀⠠⣿⣿⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⡿⠛⠁⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀
⠄⠀⠀⠠⠀⠀⠠⠀⠀⠀⠄⠀⠐⠈⠀⠠⠀⠀⠀⠀⠈⠙⠻⢿⣿⣿⣷⣶⣦⣤⣤⣴⣿⣿⣤⣤⣴⣶⣾⣿⣿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠄⠀⠀⠀⠄⠀⠀⠂⠀⠀⠄⠀⠀⠂⠀
⠀⡐⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠻⠿⠿⠿⠿⠿⠿⠿⠿⠛⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠁⢀⠀⠀⠁⠀⠈⠀⠀⠀⠈⠀⠀⠈⠀⠀⠁⠀⠀⠈⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠁⠀⠀⠁⠀⠀⠈⠀⠀⠈⠀⠀⠀⠀⠀⠈⠀⠀⠈⠀⠀⠀⠁⠀
''',
'''
⣶⣴⣶⣦⣶⣴⣦⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣶⡀⠀⠀⠀⣴⡆⠀⠀⠀⠀⠀⠀⠀⣠⡤⠶⠦⣤⣀⠀⠀⠀⠀⠀⠀⢶⣦⠀⠀⠀⠀⣠⣶⠆
⠀⠀⠀⠀⢠⣾⠟⠁⠀⠀⠀⠀⠀⢰⣶⣶⣶⣶⣶⣶⡆⠀⠀⠀⠀⠀⠀⠹⣿⡄⢀⣾⠟⠀⠀⠀⠀⠀⠀⢠⠞⠁⠀⢹⠁⠀⠙⢷⡀⠀⠀⠀⠀⠈⢿⣧⡀⠀⣸⣿⠃⠀
⠀⠀⢀⣴⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠸⣿⣾⡏⠀⠀⠀⠀⠀⠀⢠⣿⣤⣀⣀⣸⣅⣀⣀⡌⡇⠀⠀⠀⠀⠀⠈⢿⣷⣰⣿⠇⠀⠀
⠀⢀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⣀⣀⢀⡀⡀⠀⠀⠀⠀⠀⠀⠀⣠⡿⢿⣆⠀⠀⠀⠀⠀⠀⠘⣯⠉⠉⠉⢹⠍⠉⠉⢁⡇⠀⠀⠀⠀⠀⠀⠈⢿⣿⠃⠀⠀⠀
⣠⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠿⠿⠿⠿⠿⠿⠇⠀⠀⠀⠀⠀⠀⣰⡿⠁⠈⢿⣧⠀⠀⠀⠀⠀⠀⠘⢧⣀⠀⢸⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀
⠻⠛⠻⠛⠟⠻⠛⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠛⠁⠀⠀⠀⠻⠛⠀⠀⠀⠀⠀⠀⠀⠉⠛⠓⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠿⠀⠀⠀⠀
''',
'''
 /$$$$$$                   /$$$$$$$$ /$$                         /$$$$$$$                 /$$       /$$$$$$$$                     /$$           /$$   /$$
 /$$__  $$                 |__  $$__/|__/                        | $$__  $$               | $$      | $$_____/                    | $$          |__/  | $$
| $$  \\ $$ /$$$$$$$   /$$$$$$ | $$    /$$ /$$$$$$/$$$$   /$$$$$$ | $$  \\ $$ /$$$$$$   /$$$$$$$      | $$       /$$   /$$  /$$$$$$ | $$  /$$$$$$  /$$ /$$$$$$
| $$  | $$| $$__  $$ /$$__  $$| $$   | $$| $$_  $$_  $$ /$$__  $$| $$$$$$$/|____  $$ /$$__  $$      | $$$$$   |  $$ /$$/ /$$__  $$| $$ /$$__  $$| $$|_  $$_/
| $$  | $$| $$  \\ $$| $$$$$$$$| $$   | $$| $$ \\ $$ \\ $$| $$$$$$$$| $$____/  /$$$$$$$| $$  | $$      | $$__/    \\  $$$$/ | $$  \\ $$| $$| $$  \\ $$| $$  | $$
| $$  | $$| $$  | $$| $$_____/| $$   | $$| $$ | $$ | $$| $$_____/| $$      /$$__  $$| $$  | $$      | $$        >$$  $$ | $$  | $$| $$| $$  | $$| $$  | $$ /$$
|  $$$$$$/| $$  | $$|  $$$$$$$| $$   | $$| $$ | $$ | $$|  $$$$$$$| $$     |  $$$$$$$|  $$$$$$$      | $$$$$$$$ /$$/\\  $$| $$$$$$$/| $$|  $$$$$$/| $$  |  $$$$/
 \\______/ |__/  |__/ \\_______/|__/   |__/|__/ |__/ |__/ \\_______/|__/      \\_______/ \\_______/      |________/|__/  \\__/| $$____/ |__/ \\______/ |__/   \\___/
                                                                                                                        | $$
                                                                                                                        | $$
                                                                                                                        |__/
 /$$$$$$$                  /$$   /$$ /$$ /$$                           /$$                                           /$$
| $$__  $$                | $$  /$$/|__/| $$                          | $$                                          | $$
| $$  \\ $$ /$$   /$$      | $$ /$$/  /$$| $$$$$$$  /$$$$$$$   /$$$$$$ | $$   /$$  /$$$$$$  /$$$$$$/$$$$   /$$$$$$  /$$$$$$    /$$$$$$
| $$$$$$$ | $$  | $$      | $$$$$/  | $$| $$__  $$| $$__  $$ |____  $$| $$  /$$/ |____  $$| $$_  $$_  $$ /$$__  $$|_  $$_/   /$$__  $$
| $$__  $$| $$  | $$      | $$  $$  | $$| $$  \\ $$| $$  \\ $$  /$$$$$$$| $$$$$$/   /$$$$$$$| $$ \\ $$ \\ $$| $$  \\ $$  | $$    | $$  \\ $$
| $$  \\ $$| $$  | $$      | $$\\  $$ | $$| $$  | $$| $$  | $$ /$$__  $$| $$_  $$  /$$__  $$| $$ | $$ | $$| $$  | $$  | $$ /$$| $$  | $$
| $$$$$$$/|  $$$$$$$      | $$ \\  $$| $$| $$$$$$$/| $$  | $$|  $$$$$$$| $$ \\  $$|  $$$$$$$| $$ | $$ | $$|  $$$$$$/  |  $$$$/|  $$$$$$/
|_______/  \\____  $$      |__/  \\__/|__/|_______/ |__/  |__/ \\_______/|__/  \\__/ \\_______/|__/ |__/ |__/ \\______/    \\___/   \\______/
           /$$  | $$
          |  $$$$$$/
           \\______/
''',
'''     


    ...   :::.    :::..,:::::::::::::::::::::.        :  .,::::::::::::::::. :::.   :::::::-.      .,::::::    .,::      .:::::::::::. :::         ...     :::::::::::::::
 .;;;;;;;.`;;;;,  `;;;;;;;\'\'\'\';;;;;;;;\'\'\'\';;;;;,.    ;;; ;;;;\'\'\'\' `;;;```.;;;;;`;;   ;;,   `\';,    ;;;;\'\'\'\'    `;;;,  .,;;  `;;;```.;;;;;;      .;;;;;;;.  ;;;;;;;;;;;\'\'\'\'
,[[     \\[[,[[[[[. \'[[ [[cccc      [[     [[[[[[[, ,[[[[, [[cccc   `]]nnn]]\',[[ \'[[, \`[[     [[     [[cccc       \'[[,,[[\'    `]]nnn]]\' [[[     ,[[     \\[[,[[[     [[     
$$$,     $$$$$$ "Y$c$$ $$""""      $$     $$$$$$$$$$$"$$$ $$""""    $$$""  c$$$cc$$$c $$,    $$     $$""""        Y$$$P       $$$""    $$\'     $$$,     $$$$$$     $$     
"888,_ _,88P888    Y88 888oo,__    88,    888888 Y88" 888o888oo,__  888o    888   888,888_,o8P\'     888oo,__    oP"``"Yo,     888o    o88oo,.__"888,_ _,88P888     88,    
  "YMMMMMP" MMM     YM """"YUMMM   MMM    MMMMMM  M\'  "MMM""""YUMMM YMMMb   YMM   ""` MMMMP"`       """"YUMMM,m"       "Mm,   YMMMb   """"YUMMM  "YMMMMMP" MMM     MMM    

'''
]

colors = ["31", "32", "34", "36", "37", "91", "92",  "38;2;176;29;2", "38;2;140;0;0", "38;2;9;4;140"] # ansii escape codes

print(f"\033[1;{choice(colors)}m{choice(dot_arts)}\033[0m")

# set general data variables
with open("out/data.txt", "r") as f:
    data_txt = f.readlines()
    length = int(data_txt[0].replace("len: ", ""))
    m1m2_tmp = data_txt[1].replace("m1m2: ", "")[:-1]
    ct1_tmp = data_txt[2].replace("ct1: ", "")[:-1]
    ct2_tmp = data_txt[3].replace("ct2: ", "")[:-1]
    m1m2 = bytes(bytearray.fromhex(m1m2_tmp))
    ct1 = bytes(bytearray.fromhex(ct1_tmp))
    ct2 = bytes(bytearray.fromhex(ct2_tmp))

pt1_progress_bar = "_ "*length
pt2_progress_bar = "_ "*length
pt1_progress = 0 # percent
pt2_progress = 0 # percent
print("\033[1;32mlength of message:\t\033[0m", length)
print("\n\x1b[1;31mct1:\t\x1b[0m\033[37;1m ", ct1_tmp, "\033[0m")
print("\x1b[1;31mct2:\t\x1b[0m\033[37;1m ", ct2_tmp, "\033[0m")
print("\n\x1b[1;31mm1m2:\t\x1b[0m\033[37;1m ", m1m2_tmp, "\033[0m")
print("\n\x1b[1;6;38;2;224;20;20mmessage one progress bar:\t", end='')
print(f"\x1b[25;2;4;1;38;2;7;224;21m{pt1_progress_bar}\x1b[0m\t\t\033[1;38;2;7;224;21m{pt1_progress}%\033[0m")
print("\n\x1b[1;6;38;2;224;20;20mmessage two progress bar:\t", end='')
print(f"\x1b[25;2;4;1;38;2;7;224;21m{pt2_progress_bar}\x1b[0m\t\t\033[1;38;2;7;224;21m{pt2_progress}%\033[0m")
print()

# Data format: index: {x,y} where x xor y = m1m2. X and Y = can be plaintexts and ciphertexts (with same key). results in the same OneTimePad Exploit

# first use bigrams
with open("out/bigrams.txt", "r") as f:
    # calculate possible plaintext using bigrams
    bigrams_txt = f.readlines()
    bigrams_len = int(bigrams_txt[0].replace("bigram count: ", ""))
    bigrams_txt.remove(bigrams_txt[0]) # remove first index (len)
    for line in bigrams_txt:
        index = int(line.partition(":")[0])
        start = line.index("{")
        end = line.index("}")
        first = line[start+1:start+3]
        second = line[end-2:end]
